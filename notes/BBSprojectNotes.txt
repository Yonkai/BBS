☠️✅🤔👀
"Layers" for my simple BBS application, all information may be wrong or poorly understood, beware:

✅0. Tear down the current application representation (as on 2/5/2019)
and start from a new tag on github, using instead the react and nextjs framework
as it fits better, IMO, with the native directory structure
of nextjs and forums in general, as shown in the wikipedia article. 

🤔0.5? Add Redux maybe for educational purposes, however I don't think the scale of this
application will genuinely warrant it. Same applies to an error reporting service
like sentry or a content integration system like Travis CI.
(Do last.)

✅1. Begin with a FRONTEND basic html/jsx that represents a bare minimum 
representation of all interfaces that will be needed for the final
application, including content locked html pages, i.e. admin access
and moderation panels. There will be no content restriction on this
version. Pages will exist without restriction. Use composition. 
(Moderation will require backend work w/Auth.)


1.5 Design MySQL Schema.
1.5.1
Schema:
✅Database: bbs (may need to normalize these forms)

Tables: boards, threads, replys, metadata

Column headings:

//board_name is part of url
✅Boards: board_name, Surrogate PK

//thread_board_position refers to the threads position between 1->100 on the main 10 pages.
//thread_exclusive_id is part of url for exclusive page of this thread.
threads: FK->Boards PK,thread_reply_count,thread_subject,thread_board_position,thread_exclusive_id, thread_id (Surrogate PK)

//Maybe remove 'reply' and 'thread' from all column headings where thread_board_position
//the table name, it is self evident.
//FK reference is an inherit indicator of ownership? 
replys: FK->threads PK, reply_id, reply_no?, reply_in_thread_pos,
reply_original_bool, reply_username, reply_comment_text,reply_image,reply_time

metadata:visitor_count, popular_threads
//DD:
CREATE TABLE threads (
    id INT UNSIGNED NOT NULL AUTO_INCREMENT,
    reply_count INT UNSIGNED,
    subject VARCHAR(30),
    board_position TINYINT UNSIGNED,
    board_owner TINYINT UNSIGNED NOT NULL REFERENCES boards(id),
    PRIMARY KEY (id)
);

CREATE TABLE replys (
    id SMALLINT UNSIGNED NOT NULL AUTO_INCREMENT,
    reply_in_thread_pos SMALLINT NOT NULL,
    reply_original BOOLEAN DEFAULT 0,
    reply_username VARCHAR(12) DEFAULT 'anon',
    reply_comment VARCHAR(1000) NOT NULL,
    reply_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    thread_owner INT UNSIGNED NOT NULL REFERENCES threads(id),
    PRIMARY KEY (id)
);


CREATE TABLE metadata (
    id SMALLINT UNSIGNED NOT NULL AUTO_INCREMENT,
    PRIMARY KEY (id)
);

Add validator for submit for like in mdn example, push to database,
do all fields server side that can be made server side in express so it
can be 'shielded' by nginx.

Express may need to query db before submitting to the db for tings
like the LIFO portion and finding positions/bumping info. Paginator
component can be passed info as part of props instead of doing its own
API calls.

Test routes to mysql database just to make sure they work, then populate info.
to the database from jsfaker for the initial getinitialprops in nextjs
for that api restful call.

Make sure to review nextjs, express, owasp, mysql, etc for security guidlines.
Make sure sensitive files are .gitignored from the repo. and nginx has https TLS 
enabled from the digitalocean tutorial. Post online for reviews.

Make design aesthetically please but also practical.

Set up trip codes and administrative features that allow for access to protected routes,
although you might be able to do that from the server, express passport authentication
middleware might be useful.

2. For backend now, using an ORM (Sequelize?) with MySQL and express middlewares, create connections to the express or node web server
from the nextjs part of the application, and from the express web server to the MySQL DigitalOcean database server, and any other transverals
as needed, conceptually in MVC style:

NextJS-> View
Express/Node-> Controller
MySQL-> Model

Make sure to sanitize, normalize, and limit throughput. 
There is intent for the database to be a buffer only holding a certain amount of space at once (images/text).

Make physical flow diagrams to internalize these processes better, better yet, do that for the whole application. 

4. Write tests with Jest or whatever else.

5. Make a production version of the application, making changes as needed.

6. Add SASS/CSS/UI refinements: Media queries, styling, etc.

7. Update HTTP headers for better DNS caching.

8. Host a live version on an ubuntu/nginx server on my DigitalOcean cloud account.

8.5 Do an OWASP Top 10 review to hit top security issues.

8.75 SEO Optimizations.

8.88 Clean Architecture Design Review? Need to follow react design suggestions better, moving state logic up?

9. Done?

10. Post online for review, refine more, etc.

Current Stack: 
NextJS 
Css-Grid 

Note on rd:Do mobile first, then scale up.

Factors of 1200: 
1,2,3,4,5,6,8,10,
12,15,16,20,24,25,
30,40,48,50,60,75,
80,100,120,150,200,
240,300,400,600,1200,